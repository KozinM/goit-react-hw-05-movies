{"version":3,"file":"static/js/294.efd6e842.chunk.js","mappings":"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","sources":["api/fetchMovies.js","components/castGallery/castGallery.styled.js","components/castGallery/castGallery.js","components/cast/cast.styled.js","components/cast/cast.js","webpack://goit-react-hw-05-movies/./src/components/loader/loader.module.css?525a","components/loader/loader.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '565e4989d784811de7dff7d665000157';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\n/* async function fetchMovies(url = '', config = {}) {\n  const response = await fetch(url, config);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error('Not Found'));\n}; */\n\nexport async function getTrending() {\n\n  const configTrending = {\n    url: '/trending/movie/week',\n    baseURL: BASE_URL,\n    params: {\n      api_key: API_KEY,\n    },\n  };\n\n  const response = await axios(configTrending);\n  return response.data.results;\n};\n\nexport async function getMoviesSearch (query) {\n\n  const configMovieSearch = {\n    url: `/search/movie`,\n    baseURL: 'https://api.themoviedb.org/3',\n    params: {\n      api_key: '65573c76cf88d807ccbaf09ca79feb15',\n      query,\n    },\n  };\n\n  const response = await axios(configMovieSearch);\n  return response.data.results;\n};\n\nexport async function getMovieId(movieId) {\n\n  const configMovieId = {\n    url: `/movie/${movieId}`,\n    baseURL: BASE_URL,\n    params: {\n      api_key: API_KEY,\n    },\n  };\n\n  const response = await axios(configMovieId);\n  return response.data;\n};\n\nexport async function getCast(movieId) {\n\n  const configCast = {\n    url: `/movie/${movieId}/credits`,\n    baseURL: BASE_URL,\n    params: {\n      api_key: API_KEY,\n    },\n  };\n\n  const response = await axios(configCast);\n  //console.log('this is response from getCast:  ' + JSON.stringify(response.data));\n  return response.data;\n};\n\nexport async function getReviews(movieId) {\n\n  const configMovieReviews = {\n    url: `/movie/${movieId}/reviews`,\n    baseURL: BASE_URL,\n    params: {\n      api_key: API_KEY,\n    },\n  };\n\n  const response = await axios(configMovieReviews);\n  return response.data.results;\n};","import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n    grid-gap: 16px;\n    display: grid;\n    grid-template-columns: repeat(auto-fill,minmax(220px,1fr));\n    margin: 0 auto;\n    max-width: calc(100vw - 48px);\n    padding: 0;\n`;\n\nexport const CastItem = styled.li`\n  padding-bottom: 5px;\n  box-shadow: 0px 1px 3px rgb(0 0 0 / 12%), 0px 1px 1px rgb(0 0 0 / 14%),\n    0px 2px 1px rgb(0 0 0 / 20%);\n  border-radius: 0px 0px 4px 4px;\n`;\n\nexport const Paragraph = styled.p`\n  padding: 5px 10px;\n  font-size: 16px;\n  text-align: center;\n`;","import { CastList, CastItem, Paragraph } from './castGallery.styled';\nimport imageNotFound from '../../images/no_image_card.png';\n\nexport const CastGallery = ({ credits }) => {\n  //let flag = 0;\n  return (\n    <>\n      <CastList>\n        {/*console.log('this is credits in castGallery: '+credits)*/}\n        {credits &&\n          credits.map(({ id, profile_path, name, character }) => {\n            return (\n              <CastItem key={id}>\n                <img\n                  src={\n                    profile_path === null\n                      ? imageNotFound\n                      : `https://image.tmdb.org/t/p/w500/${profile_path}`\n                  }\n                  alt={name}\n                />\n                <Paragraph>{name}</Paragraph>\n                <Paragraph>Character: {character}</Paragraph>\n              </CastItem>\n            );\n          })}\n      </CastList>\n    </>\n  );\n};","import styled from 'styled-components';\n\nexport const Section = styled.section`\n  margin: 20px 20px;\n  padding-bottom: 20px;\n  border-bottom: 2px solid;\n`;","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { CastGallery } from 'components/castGallery/castGallery';\nimport { Loader } from 'components/loader/loader';\nimport { getCast } from '../../api/fetchMovies';\n\nimport { Section } from './cast.styled';\n\n\nconst Cast = () => {\n  const [credits, setCredits] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n    //console.log(\"I'm in cast\"+'  and this is movie ID:  '+ movieId);\n    getCast(movieId)\n      .then(response => {\n        //console.log(\"cast was loaded\");\n        //console.log('this is response in cast: '+ response.cast);\n        setCredits(response);\n      })\n      .catch(error => setError(error.message))\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {error && <p>Oops, some error:{error}</p>}\n      {/*console.log('this is credits: '+JSON.stringify(credits))*/}\n      <Section>\n        <CastGallery credits={credits.cast} />\n      </Section>\n    </>\n  );\n};\n\nexport default Cast;","// extracted by mini-css-extract-plugin\nexport default {\"overlay\":\"loader_overlay__YY81e\",\"ldsRoller\":\"loader_ldsRoller__ehiy1\"};","import s from './loader.module.css';\n\n\nexport function Loader() {\n  return (\n    <div className={s.overlay}>\n      <div className={s.ldsRoller}>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n      </div>\n    </div>\n  );\n}"],"names":["API_KEY","BASE_URL","getTrending","configTrending","url","baseURL","params","api_key","axios","response","data","results","getMoviesSearch","query","configMovieSearch","getMovieId","movieId","configMovieId","getCast","configCast","getReviews","configMovieReviews","CastList","styled","CastItem","Paragraph","CastGallery","credits","map","id","profile_path","name","character","src","imageNotFound","alt","Section","useState","setCredits","isLoading","setIsLoading","error","setError","useParams","useEffect","then","catch","message","finally","cast","Loader","className","s"],"sourceRoot":""}